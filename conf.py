#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# google-auth documentation build configuration file, created by
# sphinx-quickstart on Thu Sep 22 12:50:15 2016.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import os
import pkg_resources
import shutil
from pathlib import Path

from sphinx.util import logging

logger = logging.getLogger(__name__)

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.intersphinx",
    "sphinx.ext.viewcode",
    "sphinx.ext.napoleon",
    "sphinx_docstring_typing",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The encoding of source files.
#
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "google-auth"
copyright = "2016, Google, Inc."
author = "Google, Inc."

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = ""

# Static HTML pages, e.g. to support redirects
# See: https://tech.signavio.com/2017/managing-sphinx-redirects
# HTML pages to be copied from source to target
# list obtained with glob.glob("**/*.html", recursive=True)
static_html_pages = [
    "search.html",
    "genindex.html",
    "py-modindex.html",
    "user-guide.html",
    "index.html",
    "oauth2client-deprecation.html",
    "_modules/abc.html",
    "_modules/index.html",
    "_modules/urllib3/request.html",
    "_modules/aiohttp/client.html",
    "_modules/requests/sessions.html",
    "_modules/google/oauth2/utils.html",
    "_modules/google/oauth2/_service_account_async.html",
    "_modules/google/oauth2/_credentials_async.html",
    "_modules/google/oauth2/sts.html",
    "_modules/google/oauth2/credentials.html",
    "_modules/google/oauth2/id_token.html",
    "_modules/google/oauth2/service_account.html",
    "_modules/google/auth/_credentials_async.html",
    "_modules/google/auth/identity_pool.html",
    "_modules/google/auth/transport.html",
    "_modules/google/auth/app_engine.html",
    "_modules/google/auth/_jwt_async.html",
    "_modules/google/auth/_default.html",
    "_modules/google/auth/iam.html",
    "_modules/google/auth/jwt.html",
    "_modules/google/auth/impersonated_credentials.html",
    "_modules/google/auth/exceptions.html",
    "_modules/google/auth/aws.html",
    "_modules/google/auth/credentials.html",
    "_modules/google/auth/external_account.html",
    "_modules/google/auth/compute_engine/credentials.html",
    "_modules/google/auth/transport/urllib3.html",
    "_modules/google/auth/transport/grpc.html",
    "_modules/google/auth/transport/_aiohttp_requests.html",
    "_modules/google/auth/transport/mtls.html",
    "_modules/google/auth/transport/requests.html",
    "_modules/google/auth/crypt/_python_rsa.html",
    "_modules/google/auth/crypt/base.html",
    "reference/google.auth.credentials.html",
    "reference/google.auth.jwt.html",
    "reference/google.auth.crypt.html",
    "reference/google.oauth2._credentials_async.html",
    "reference/google.auth.exceptions.html",
    "reference/google.auth.iam.html",
    "reference/google.oauth2.sts.html",
    "reference/google.oauth2.utils.html",
    "reference/google.auth.aws.html",
    "reference/google.auth.compute_engine.credentials.html",
    "reference/google.auth.transport._aiohttp_requests.html",
    "reference/google.auth.impersonated_credentials.html",
    "reference/modules.html",
    "reference/google.html",
    "reference/google.auth.crypt.base.html",
    "reference/google.oauth2.service_account.html",
    "reference/google.oauth2.credentials.html",
    "reference/google.oauth2._service_account_async.html",
    "reference/google.auth.app_engine.html",
    "reference/google.auth.transport.requests.html",
    "reference/google.auth._jwt_async.html",
    "reference/google.auth.external_account.html",
    "reference/google.auth.transport.urllib3.html",
    "reference/google.auth.transport.mtls.html",
    "reference/google.auth.html",
    "reference/google.auth._credentials_async.html",
    "reference/google.auth.identity_pool.html",
    "reference/google.oauth2.id_token.html",
    "reference/google.auth.crypt.rsa.html",
    "reference/google.auth.crypt.es256.html",
    "reference/google.auth.compute_engine.html",
    "reference/google.auth.environment_vars.html",
    "reference/google.oauth2.html",
    "reference/google.auth.transport.html",
    "reference/google.auth.transport.grpc.html",
]


def copy_static_html_pages(app, exception):
    logger.info("Copying static html pages...")
    if exception is None and (
        app.builder.name == "html" or app.builder.name == "readthedocs"
    ):
        for static_html_page in static_html_pages:
            target_path = Path(app.outdir + "/" + static_html_page)
            src_path = Path(app.srcdir + "/" + static_html_page)
            if os.path.isfile(src_path):
                logger.info("Copying static html: %s -> %s", src_path, target_path)
                if not target_path.parent.exists():
                    target_path.parent.mkdir(parents=True)
                shutil.copyfile(src_path, target_path)


def setup(app):
    app.connect("build-finished", copy_static_html_pages)
